" 前半部分是通用配置，请弄清楚每一行在干什么并背诵。
" 弄清楚每一行干什么之后，考场上如果缺了一个功能可以回忆起来。

set cpo-=<  " 防止后面的 map 出现问题
set rnu  " 相对行号
set nu   " 当前行号

" 忘记啥了
set nowrap
set noeb

" 设置不要将 tab 替换成 space
set noexpandtab
%retab!
" 搜索时忽略大小写
set ic

" 设置 tab 长度为 4，把这三个都背下来
set tabstop=4
set shiftwidth=4
set softtabstop=4
" 设置开启鼠标的全部功能
set mouse=a
" 自动缩进
set autoindent
" 根据文件名后缀进行缩进
filetype plugin indent on


" 普通模式下按 Ctrl+C 可以复制全部
nnoremap <C-C> gg"+yG
" 可视（选中）模式下按 Ctrl+C 可以复制选中部分
vnoremap <C-C> "+y

" 开启语法高亮
syntax on

" 不要创建备份文件、交换文件等
set nobackup
set noswapfile
set noundofile

" 插入模式下按 jk 可以回到普通模式
inoremap jk <ESC>
" 括号映射
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap { {}<LEFT>
" 更好的大括号映射。autocmd FileType cpp 当文件类型是 cpp
" 的时候执行后面的映射。
autocmd FileType cpp inoremap { {}<LEFT><CR><UP><END>
" 这是一个函数，当输入右括号并且已经有右括号时会移到右边。
function RepairBracket(ch)
	" 把当前行存在 line 变量中
	let line = getline(".")
	" 把下一个字符存一下
	let next_ch = line[col(".")]
	" 如果一样的话就跳过，否则插入
	if a:ch == next_ch
		execute "normal! l"
	else
		execute "normal! a" . a:ch
	end
endfunction

" 插入模式按 TAB 补全。
" 补全功能是只有写过东西才会补全，更多的补全需要使用插件。
inoremap <TAB> <C-P>
" 如果真的想要插入 Tab，按 Shift+Tab 
inoremap <S-TAB> <TAB>

" 映射右括号为自定义的函数
inoremap ) <ESC>:call RepairBracket(')')<CR>a
inoremap ] <ESC>:call RepairBracket(']')<CR>a

" 这个函数用来在删除时一次删掉括号，因为太长了，考场上不用写。
" 另外这个函数在行开头会导致 backspace 出现 bug。
function RemoveBracket()
	let line=getline(".")
	if strlen(line) == 0
		execute 'normal! kJx'
		return
	elseif col(".") == 1 || col(".") == strlen(line)
		execute 'normal! x'
		return
	endif
	let ch=line[col(".")-1]
	let nxch=line[col(".")]
	let mrk=1
	if col(".") == strlen(line)
		let mrk=0
	endif
	if ch == '[' && nxch == ']'
		execute 'normal! x'
	elseif ch == '{' && nxch == '}'
		execute 'normal! x'
	elseif ch == '(' && nxch == ')'
		execute 'normal! x'
	elseif ch == "'" && nxch == "'"
		execute 'normal! x'
	elseif ch == '"' && nxch == '"'
		execute 'normal! x'
	endif
	if col(".") >= strlen(getline("."))
		let mrk=0
	endif
	execute "normal! x"
	if mrk
		execute 'normal! h'
	endif
endfunction

" 插入模式下按 Ctrl+V 粘贴系统剪切板
inoremap <C-V> <ESC>"+pa
" 防止奇怪的错误，比如 Backspace 无法删掉括号
set backspace=indent,eol,start

" 下面这行是映射 backspace，考场上请不要使用。
" autocmd FileType cpp inoremap <BS> <ESC>:call RemoveBracket()<CR>a

" <F9> 编译
autocmd FileType cpp nnoremap <F9> :w<CR>:!cls<CR>:!g++ % -o %< -std=c++17 -Wl,--stack=512000000<CR>
" <F10> 运行
autocmd FileType cpp nnoremap <F10> :!cls<CR>:!%<<CR>
" <F12> 带一些参数编译，包括 O2 和调试信息
autocmd FileType cpp nnoremap <F12> :w<CR>:!cls<CR>:!g++ % -o %< -std=c++17 -O2 -g -Wl,--stack=512000000<CR>



" 以下为个人配置。z 跳到当前匹配的括号。不需要背诵，按照自己习惯来。
nnoremap z %
nnoremap dz d%
nnoremap dv V%d
nnoremap =z =%
nnoremap yz V%y$%
" 设置折叠功能
set foldenable
set foldmethod=manual
nnoremap Z za
nnoremap <C-Z> zfa{
vnoremap z %
vnoremap Z zf
nnoremap + zR
nnoremap - zM
nnoremap <DEL> zD
nnoremap <space> $
"set lines=30
"set columns=100

" 自动写 for 循环
function WriteFor(str)
	let a=""
	let b=""
	let c=""
	if strlen(a:str)==3
		let a=a:str[0]
		let b=a:str[1]
		let c=a:str[2]
	else
		" a=b; a<=c; a++
		let w=1
		let s1=0
		let s2=0
		for i in range(0,strlen(a:str)-1)
			if a:str[i]==',' && s1==0 && s2==0
				let w=w+1
			else
				if w==1
					let a = a . a:str[i]
					" echo a:str[i] . ' ' . a
				elseif w==2
					let b = b . a:str[i]
				else
					let c = c . a:str[i]
				endif
				if a:str[i]=='('
					let s1=s1+1
				elseif a:str[i]==')'
					let s1=s1-1
				elseif a:str[i]=='['
					let s2=s2+1
				elseif a:str[i]==']'
					let s2=s2-1
				endif
			endif
		endfor
	endif
	if b=="-"
		let outputstr = "for(int " . a . "=" . "0; ". a . "<"
	else
		let outputstr = "for(int " . a . "=" . b . "; " . a  . "<"
	endif
	if b!="0"
		let outputstr = outputstr . "="
	endif
	let outputstr = outputstr . c . "; " . a . "++)"
	execute "normal! cc" . outputstr
endfunction

function WriteEdge(str)
	"iu
	let outputstr = "for(int " . a:str[0] . "=h[" . a:str[1] . "]; " . a:str[0] . "; " . a:str[0] . "=nx[" . a:str[0] . "])"
	execute "normal! cc" . outputstr
endfunction

" 自动写 scanf，默认用 %d 并且加 &
function WriteScanf(str)
	"n,m
	let s1 = "scanf(\"%d"
	let s2 = "&"
	for i in range(0,strlen(a:str)-1)
		let s2 = s2 . a:str[i]
		if a:str[i]==','
			let s1 = s1 . "%d"
			let s2 = s2 . "&"
		endif
	endfor
	let ans = s1 . "\"," . s2 . ");"
	execute "normal! cc" . ans
endfunction
autocmd FileType cpp inoremap <C-F> <esc>:call WriteFor("")<left><left>
autocmd FileType cpp inoremap <C-U> <esc>:call WriteEdge("")<left><left>
autocmd FileType cpp inoremap <C-C> <esc>:call WriteScanf("")<left><left>
autocmd FileType cpp inoremap UU <ESC>ccusing namespace std;
autocmd FileType cpp inoremap TY <ESC>cctypedef long long ll;
